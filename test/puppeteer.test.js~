var mocha = require('mocha')
, chai = require('chai')
, chaiAsPromised = require('chai-as-promised')
, assert = chai.assert
, expect = chai.expect
, should = chai.should()
, _ = require('lodash');

chai.use(chaiAsPromised);

const Promise = require('bluebird');

describe('seneca:action microservice', () => {
    before((done) => {
        seneca.ready(done);
    });
    describe('on:online-scan', () => {
	it('should validate parameters', (done) => {
            seneca.actAsync('role:on,cmd:online-scan,action:start', {card: {}})
                .then(() => { throw new Error('Shouldn\'t be here');})
                .catch((err) => {
                    console.log(err);
                    expect(err).to.exist;
                    //expect(err).to.have.property('orig');
                    // expect(err.orig).to.exist;
                    // expect(err.orig).to.have.property('code');
                    // expect(err.orig.code).to.equal('Invalid arguments');
                    return seneca;
                })
                .finally(done);
        });
    })})
